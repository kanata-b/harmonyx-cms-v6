# Main Docker Compose - รัน Directus CMS + Next.js Frontend พร้อมกัน
name: harmonyx-cms-full

services:
  # Kong Database (separate from Directus DB)
  # kong-db:
  #   image: postgres:15-alpine
  #   container_name: kong-db
  #   volumes:
  #     - kong-db-data:/var/lib/postgresql/data
  #   environment:
  #     POSTGRES_USER: kong
  #     POSTGRES_PASSWORD: ${KONG_DB_PASSWORD:-kongpassword}
  #     POSTGRES_DB: kong
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "kong", "-d", "kong", "-h", "localhost"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - kong-net

  # Kong Migration (run once to setup database)
  # kong-migration:
  #   image: kong:3.7
  #   depends_on:
  #     kong-db:
  #       condition: service_healthy
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: kong-db
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kongpassword}
  #     KONG_PG_DATABASE: kong
  #   command: kong migrations bootstrap
  #   restart: on-failure
  #   networks:
  #     - kong-net

  # Kong API Gateway
  kong:
    image: kong:3.7
    volumes:
      - ./kong/kong.yml:/usr/local/kong/declarative/kong.yml
    environment:
      # KONG_DATABASE: postgres
      # KONG_PG_HOST: kong-db
      # KONG_PG_USER: kong
      # KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kongpassword}
      # KONG_PG_DATABASE: kong
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
    ports:
      - "8000:8000"   # Public proxy
      - "8443:8443"   # Public proxy SSL
      - "8001:8001"   # Admin API
      - "8444:8444"   # Admin API SSL
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - harmonyx_network

  # Database for Directus
  database:
    image: postgis/postgis:16-master
    platform: linux/amd64
    volumes:
      - ./directus/data/database:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_DATABASE}", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s
    networks:
      - harmonyx_network

  # Redis Cache for Directus
  cache:
    image: redis:6
    healthcheck:
      test: ["CMD-SHELL", "[ $$(redis-cli ping) = 'PONG' ]"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s
    networks:
      - harmonyx_network

  # Directus CMS
  directus:
    image: directus/directus:11.7.2
    volumes:
      - ./directus/data:/directus/data
      - ./directus/uploads:/directus/uploads
      - ./directus/extensions:/directus/extensions
      - ./directus/template:/directus/template
    ports:
      - "${DIRECTUS_PORT:-8055}:8055"  # Re-enabled for development
    depends_on:
      database:
        condition: service_healthy
      cache:
        condition: service_healthy
    environment:
      SECRET: ${DIRECTUS_SECRET}
      
      DB_CLIENT: "pg"
      DB_HOST: "database"
      DB_PORT: "5432"
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}

      CACHE_ENABLED: ${CACHE_ENABLED}
      CACHE_AUTO_PURGE: ${CACHE_AUTO_PURGE}
      CACHE_STORE: "redis"
      REDIS: "redis://cache:6379"

      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}

      WEBSOCKETS_ENABLED: ${WEBSOCKETS_ENABLED}
      PUBLIC_URL: ${PUBLIC_URL}
      CORS_ENABLED: ${CORS_ENABLED}
      CORS_ORIGIN: ${CORS_ORIGIN}

      REFRESH_TOKEN_COOKIE_SECURE: ${REFRESH_TOKEN_COOKIE_SECURE}
      REFRESH_TOKEN_COOKIE_SAME_SITE: ${REFRESH_TOKEN_COOKIE_SAME_SITE}
      REFRESH_TOKEN_DOMAIN: ${REFRESH_TOKEN_COOKIE_DOMAIN}

      SESSION_COOKIE_SECURE: ${SESSION_COOKIE_SECURE}
      SESSION_COOKIE_SAME_SITE: ${SESSION_COOKIE_SAME_SITE}
      SESSION_COOKIE_DOMAIN: ${SESSION_COOKIE_DOMAIN}

      EXTENSIONS_PATH: ${EXTENSIONS_PATH}
      EXTENSIONS_AUTO_RELOAD: ${EXTENSIONS_AUTO_RELOAD}

      CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: ${CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC}

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://0.0.0.0:8055/server/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - harmonyx_network

  # Next.js Frontend
  nextjs:
    build:
      context: ./nextjs
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - ./nextjs/.env
    # environment:
    #   - DIRECTUS_URL=http://directus:8055
    #   - NEXT_PUBLIC_DIRECTUS_URL=http://localhost:8000/cms
    #   - DIRECTUS_ASSET_URL=http://directus:8055  
    #   - NEXT_PUBLIC_DIRECTUS_ASSET_URL=http://localhost:8000/cms
    #   - DIRECTUS_PUBLIC_TOKEN=${DIRECTUS_PUBLIC_TOKEN}
    #   - DIRECTUS_FORM_TOKEN=${DIRECTUS_FORM_TOKEN}
    #   - NEXT_PUBLIC_SITE_URL=http://localhost:8000
    #   - NODE_ENV=production
    depends_on:
      database:
        condition: service_healthy
      cache:
        condition: service_healthy
      directus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - harmonyx_network

# Shared network for internal communication
networks:
  harmonyx_network:
    driver: bridge
